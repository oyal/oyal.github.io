<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flask项目的部署</title>
      <link href="/posts/80507eb4/"/>
      <url>/posts/80507eb4/</url>
      
        <content type="html"><![CDATA[<p>环境：CentOS 7.6，Python 3.6.8</p><p>两种方法，一种 supervisor，一种 docker</p><h2 id="gunicorn-supervisor"><a href="#gunicorn-supervisor" class="headerlink" title="gunicorn + supervisor"></a>gunicorn + supervisor</h2><p>使用 ftp 将项目文件传到服务器中</p><h3 id="安装配置虚拟环境"><a href="#安装配置虚拟环境" class="headerlink" title="安装配置虚拟环境"></a>安装配置虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install python-virtualenv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> virturalenv venv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./venv/bin/activate</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install gunicorn</span></span><br></pre></td></tr></table></figure><h3 id="安装配置-supervisor"><a href="#安装配置-supervisor" class="headerlink" title="安装配置 supervisor"></a>安装配置 supervisor</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install supervisor</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start supervisor</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> supervisor</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/supervisord.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后一行将 .ini 改为 .conf</span></span><br><span class="line">...</span><br><span class="line">[include]</span><br><span class="line">files = supervisord.d/*.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart supervisor</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/supervisord.d/flask-blog.conf</span></span><br><span class="line"></span><br><span class="line">[program:flask-blog]</span><br><span class="line">command=/root/flask-blog/venv/bin/gunicorn -w 2 -b 0.0.0.0:5000 app:app</span><br><span class="line">directory=/root/flask-blog</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br><span class="line">redirect_stderr=true</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> supervisorctl status</span></span><br><span class="line">flask-blog                       RUNNING   pid 1921, uptime 1:07:41</span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -tunlp | grep 5000</span></span><br><span class="line">tcp        0      0 0.0.0.0:5000            0.0.0.0:*               LISTEN      1921/python</span><br></pre></td></tr></table></figure><p><strong>notes</strong>：更改 conf 文件需要执行 <code>supervisorctl update</code> 加载新的配置，否则会报错无法重新 start</p><p>预览地址：<a href="http://81.68.234.158:5000/">http://81.68.234.158:5000</a></p><h2 id="gunicorn-docker"><a href="#gunicorn-docker" class="headerlink" title="gunicorn + docker"></a>gunicorn + docker</h2><p>使用 ftp 将项目文件传到服务器中</p><p>确保已安装 docker 环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim requirements.txt</span></span><br><span class="line"></span><br><span class="line">flask</span><br><span class="line">gunicorn</span><br><span class="line">gevent</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim gunicorn.conf.py</span></span><br><span class="line"></span><br><span class="line">workers = 5</span><br><span class="line">worker_class = &#x27;gevent&#x27;</span><br><span class="line">bind = &#x27;0.0.0.0:8848&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim Dockerfile</span></span><br><span class="line"></span><br><span class="line">FROM python:3</span><br><span class="line">WORKDIR /root/flask-demo</span><br><span class="line">COPY . .</span><br><span class="line">RUN pip install-r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">CMD [&quot;gunicorn&quot;, &quot;app:app&quot;, &quot;-c&quot;, &quot;./gunicorn.conf.py&quot;]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t flask-demo .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8848:8848 --name flask-demo flask-demo</span></span><br></pre></td></tr></table></figure><p>预览地址：<a href="http://81.68.234.158:8848/">http://81.68.234.158:8848</a></p><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/78432719">https://zhuanlan.zhihu.com/p/78432719</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask-sqlalchemy中的一对多、多对多</title>
      <link href="/posts/3637fc94/"/>
      <url>/posts/3637fc94/</url>
      
        <content type="html"><![CDATA[<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>Article 和 Content 一对多关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;articles&#x27;</span></span><br><span class="line"></span><br><span class="line">    aid = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">+   comments = db.relationship(<span class="string">&#x27;Comment&#x27;</span>, backref=db.backref(<span class="string">&#x27;articles&#x27;</span>))</span><br><span class="line">    createdDate = db.Column(db.DateTime, nullable=<span class="literal">False</span>, default=datetime.now(),</span><br><span class="line">                            server_default=db.text(<span class="string">&#x27;CURRENT_TIMESTAMP&#x27;</span>))</span><br><span class="line">    updatedDate = db.Column(db.DateTime, nullable=<span class="literal">False</span>, default=datetime.now(),</span><br><span class="line">                            server_default=db.text(<span class="string">&#x27;CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;comments&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    content = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">    aid = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;articles.aid&#x27;</span>)) <span class="comment"># 文章 id</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">article = Article.query.get(<span class="number">1</span>) <span class="comment"># 查询文章</span></span><br><span class="line">article.comments.append(Comment(content=<span class="string">&#x27;评论123&#x27;</span>)) <span class="comment"># 添加评论，可为多个</span></span><br><span class="line">db.session.add(article)</span><br><span class="line">db.session.commit() <span class="comment"># 提交</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(article.comments[<span class="number">0</span>].content) <span class="comment"># 评论123</span></span><br></pre></td></tr></table></figure><p>comments 表中数据</p><table><thead><tr><th>id</th><th>content</th><th>aid</th></tr></thead><tbody><tr><td>1</td><td>评论123</td><td>1</td></tr></tbody></table><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>Article 和 Category 多对多关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ac = db.Table(<span class="string">&#x27;ac&#x27;</span>,</span><br><span class="line">              db.Column(<span class="string">&#x27;aid&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;articles.aid&#x27;</span>)),</span><br><span class="line">              db.Column(<span class="string">&#x27;cid&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;categories.cid&#x27;</span>))</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;articles&#x27;</span></span><br><span class="line"></span><br><span class="line">    aid = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">+   categories = db.relationship(<span class="string">&#x27;Category&#x27;</span>, secondary=ac, backref=db.backref(<span class="string">&#x27;articles&#x27;</span>))</span><br><span class="line">    createdDate = db.Column(db.DateTime, nullable=<span class="literal">False</span>, default=datetime.now(),</span><br><span class="line">                            server_default=db.text(<span class="string">&#x27;CURRENT_TIMESTAMP&#x27;</span>))</span><br><span class="line">    updatedDate = db.Column(db.DateTime, nullable=<span class="literal">False</span>, default=datetime.now(),</span><br><span class="line">                            server_default=db.text(<span class="string">&#x27;CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;categories&#x27;</span></span><br><span class="line"></span><br><span class="line">    cid = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>), nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">article.categories.append(Category(name=<span class="string">&#x27;归档1&#x27;</span>))</span><br><span class="line">article.categories.append(Category(name=<span class="string">&#x27;归档2&#x27;</span>))</span><br><span class="line">db.session.add(article)</span><br><span class="line">db.session.commit()</span><br><span class="line"><span class="built_in">print</span>(article.categories) <span class="comment"># [&lt;Category 12&gt;, &lt;Category 13&gt;]</span></span><br></pre></td></tr></table></figure><p>需要新建一个关联表 ac，两个外键为 Article 和 Comment 的主键，其中一个模型使用 relationship 关联，与一对多不同的是需要增加一个字段 <code>secondary</code> ，值为关联表</p><p>ac 表</p><table><thead><tr><th>aid</th><th>cid</th></tr></thead><tbody><tr><td>1</td><td>12</td></tr><tr><td>1</td><td>13</td></tr></tbody></table><p>categories 表</p><table><thead><tr><th>cid</th><th>name</th></tr></thead><tbody><tr><td>12</td><td>归档1</td></tr><tr><td>13</td><td>归档2</td></tr></tbody></table><hr><p>使用 relationship 还有一个比较方便的操作，可以直接使用映射属性名新增关联表数据</p><p>新建文章时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">article = Article(title=<span class="string">&#x27;cesi12&#x27;</span>, content=<span class="string">&#x27;con123&#x27;</span>, categories=[Category(name=<span class="string">&#x27;ca111&#x27;</span>), Category(name=<span class="string">&#x27;ca222&#x27;</span>)])</span><br><span class="line">db.session.add(article)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p>等同于下面的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">article = Article(title=<span class="string">&#x27;cesi12&#x27;</span>, content=<span class="string">&#x27;con123&#x27;</span>)</span><br><span class="line">category1 = Category(name=<span class="string">&#x27;ca111&#x27;</span>)</span><br><span class="line">category2 = Category(name=<span class="string">&#x27;ca222&#x27;</span>)</span><br><span class="line">article.categories.append(category1)</span><br><span class="line">article.categories.append(category2)</span><br><span class="line">db.session.add(article)</span><br><span class="line">db.session.add(actegory1)</span><br><span class="line">db.session.add(category2)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask-migrate映射数据库</title>
      <link href="/posts/ec66d1f3/"/>
      <url>/posts/ec66d1f3/</url>
      
        <content type="html"><![CDATA[<p>使用 <code>db.create_all()</code> 后期修改或者增加字段的时候，不会自动映射到数据库中，必须删除表，然后重新运行 <code>db.create_all()</code> 才会重新映射</p><p><code>flask-migrate</code> 可以将修改的字段映射到数据库中</p><p>老版本的 <code>flask-migrate</code> 需配合 <code>flask-script</code> 使用，由于 <code>flask-script</code> 长久不维护，且没有适配 <code>flask 2.0</code> 以上的版本，所以 <code>flask-migrate</code> 去掉了 <code>flask-script</code> 的支持</p><p>官方文档：<a href="https://flask-migrate.readthedocs.io/en/latest">https://flask-migrate.readthedocs.io/en/latest</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> activate <span class="comment"># 进入虚拟环境</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install flask-migrate <span class="comment"># 当前版本为 3.1.0</span></span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> *</span><br><span class="line">+ <span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line"></span><br><span class="line">db.init_app(app)</span><br><span class="line">- <span class="comment"># db.create_all(app=app)</span></span><br><span class="line">+ migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> activate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flask db init <span class="comment"># 默认 flask 启动文件为 app.py，不是的话需要更改环境变量</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flask db migrate -m <span class="string">&quot;initial migration&quot;</span> <span class="comment"># -m 会将内容添加到版本文件名中</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flask db upgrade</span></span><br></pre></td></tr></table></figure><p><code>flask db init</code> 会生成 <code>migrations</code> 文件夹，目录结构如下：</p><p><img src="https://oyal.oss-cn-beijing.aliyuncs.com/img/202203172347607.png" alt="image-20220317234651916"></p><h2 id="排坑"><a href="#排坑" class="headerlink" title="排坑"></a>排坑</h2><p>只有在新增或者删减字段时 <code>flask db migrate</code> 才会起作用</p><p>更新表字段不起作用，输出 <code>INFO  [alembic.env] No changes in schema detected.</code></p><p>经过多方查询，需更改 <code>migrations -&gt; env.py</code> 中的配置项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_migrations_online</span>():</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">with</span> connectable.connect() <span class="keyword">as</span> connection:</span><br><span class="line">        context.configure(</span><br><span class="line">            <span class="comment"># ...</span></span><br><span class="line">+            compare_type=<span class="literal">True</span>, <span class="comment"># 检查字段类型</span></span><br><span class="line">+            compare_server_default=<span class="literal">True</span>, <span class="comment"># 比较默认值</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Flask-Migrate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask使用flask-sqlalchemy操作数据库</title>
      <link href="/posts/81c8f85f/"/>
      <url>/posts/81c8f85f/</url>
      
        <content type="html"><![CDATA[<p>Flask 中一般使用 <code>pymysql</code> 或者 <code>flask-sqlalchemy</code> 操作数据库，本案例中使用 <code>flask-sqlalchemy</code> 进行基本的操作</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> activate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install flask-sqlalchemy pymysql</span></span><br></pre></td></tr></table></figure><p>需配置数据库驱动，我使用的是 <code>pymysql</code>，默认驱动为 <code>mysqldb</code>，python3 好像并不支持 pip 安装 <code>mysqldb</code>，<code>pymysql</code> 效率好像也更高一些</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>uri 格式 <code>dialect+driver://username:password@host:port/database</code></p><p>实例：<code>mysql+pymysql://root:root@localhost:3306/mydatabase</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = mysql+pymysql://root:root@localhost:<span class="number">3306</span>/mydatabase</span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><p>发现会有警告信息</p><p>可以设置 <code>SQLALCHEMY_TRACK_MODIFICATIONS</code> 为 <code>False</code></p><p><a href="http://www.pythondoc.com/flask-sqlalchemy/config.html?highlight=sqlalchemy_track_modifications">SQLALCHEMY_TRACK_MODIFICATIONS</a> 如果设置成 True (默认情况)，<code>Flask-SQLAlchemy</code> 将会追踪对象的修改并且发送信号。这需要额外的内存，如果不必要的可以禁用它。</p><h2 id="新建表"><a href="#新建表" class="headerlink" title="新建表"></a>新建表</h2><p><strong>支持的字段类型</strong></p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Integer</td><td>一个整数</td></tr><tr><td>String (size)</td><td>有长度限制的字符串</td></tr><tr><td>Text</td><td>一些较长的 unicode 文本</td></tr><tr><td>DateTime</td><td>表示为 Python <code>datetime</code> 对象的时间和日期</td></tr><tr><td>Float</td><td>存储浮点值</td></tr><tr><td>Boolean</td><td>存储布尔值</td></tr><tr><td>PickleType</td><td>存储为一个持久化的 Python 对象</td></tr><tr><td>LargeBinary</td><td>存储一个任意大的二进制数据</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">30</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">30</span>), nullable=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">30</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    role = db.Column(db.Integer, nullable=<span class="literal">False</span>, default=<span class="number">1</span>)</span><br><span class="line">    createdDate = db.Column(db.DateTime, default=datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    uid = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;user.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p><code>primary_key</code> 主键</p><p><code>autoincrement</code> 是否自增长</p><p><code>nullable</code> 是否为空</p><p><code>default</code> 默认值，只有在添加数据时如果没给 model 传值，会使用 <code>default</code> 值</p><p><code>server_default</code> 生成表结构时的 字段默认值，只能为 str 类型，其他类型会报错，可用 <code>db.text()</code> 进行包裹，直接使用单引号或者双引号效果应该也是一样的</p><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p><a href="http://www.pythondoc.com/flask-sqlalchemy/api.html">http://www.pythondoc.com/flask-sqlalchemy/api.html</a></p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user = User(username=<span class="string">&#x27;admin&#x27;</span>, email=<span class="string">&#x27;admin@oyal.ml&#x27;</span>, password=<span class="string">&#x27;aaa&#x27;</span>, role=<span class="number">1</span>)</span><br><span class="line">db.session.add(user)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user = User.query.filter_by(username=&#x27;admin&#x27;).first()</span></span><br><span class="line">user = User.query.<span class="built_in">filter</span>(User.username == <span class="string">&#x27;admin&#x27;</span>).first()</span><br><span class="line"><span class="built_in">print</span>(user.email) <span class="comment"># admin@oyal.ml</span></span><br></pre></td></tr></table></figure><p><img src="https://oyal.oss-cn-beijing.aliyuncs.com/img/202203221419686.png" alt="image-202203221419686"></p><p><code>filter_by()</code> 用于简单的查询，不支持比较运算符</p><p><code>filter</code> 比 <code>filter_by</code> 强大，支持比较运算符 ==、&gt;、&lt; 等，or、in 等语法</p><p><img src="https://oyal.oss-cn-beijing.aliyuncs.com/img/202203221421606.png" alt="image-202203221421606"></p><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user = User.query.<span class="built_in">filter</span>(User.username == <span class="string">&#x27;admin&#x27;</span>).first()</span><br><span class="line">user.email = <span class="string">&#x27;oyal@qq.com&#x27;</span></span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user = User.query.filter(User.username == &#x27;admin&#x27;).first()</span><br><span class="line">db.session.delete(user)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><h2 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h2><h3 id="外键-amp-关系（ForeignKey-amp-relationship）"><a href="#外键-amp-关系（ForeignKey-amp-relationship）" class="headerlink" title="外键 &amp; 关系（ForeignKey &amp; relationship）"></a>外键 &amp; 关系（ForeignKey &amp; relationship）</h3><p>如果需要查询文章的作者信息，需要两次查询，先查找文章 <code>uid</code> 再 通过 <code>id</code> 查询作者信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">article = Article.query.<span class="built_in">filter</span>(Article.title == <span class="string">&#x27;test&#x27;</span>).first()</span><br><span class="line"><span class="built_in">print</span>(article.author.username)</span><br><span class="line">user = User.query.<span class="built_in">filter</span>(User.<span class="built_in">id</span> == article.uid).first()</span><br></pre></td></tr></table></figure><p>可设置 <code>relationship()</code>，映射到 <code>user</code> 表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    uid = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;user.id&#x27;</span>))</span><br><span class="line">    author = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=db.backref(<span class="string">&#x27;articles&#x27;</span>))</span><br></pre></td></tr></table></figure><p>给 <code>Article</code> 模型添加一个 <code>author</code> 属性，可以通过个属性访问作者信息</p><p><code>backref</code> 代表反向引用，可以通过 <code>User.articles</code> 查询这个模型所写的所有文章</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">article = Article.query.<span class="built_in">filter</span>(Article.title == <span class="string">&#x27;test&#x27;</span>).first()</span><br><span class="line"><span class="built_in">print</span>(article.author.username) <span class="comment"># admin</span></span><br></pre></td></tr></table></figure><p>查询作者所有文章可以使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user = User.query.<span class="built_in">filter</span>(User.<span class="built_in">id</span> == <span class="string">&#x27;1&#x27;</span>).first()</span><br><span class="line"><span class="built_in">print</span>(user.articles) <span class="comment"># [&lt;Article 1&gt;, &lt;Article 2&gt;]</span></span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> user.articles:</span><br><span class="line">    <span class="built_in">print</span>(article.title) <span class="comment"># test、test2</span></span><br></pre></td></tr></table></figure><h2 id="拆分-app-和-model"><a href="#拆分-app-和-model" class="headerlink" title="拆分 app 和 model"></a>拆分 app 和 model</h2><p>为了解决循环引用需要创建 <code>db.py</code> 新建数据库实例</p><ul><li>目录结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">. </span><br><span class="line">├── app.py</span><br><span class="line">├── db.py</span><br><span class="line">├── models.py</span><br></pre></td></tr></table></figure><ul><li>db.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br></pre></td></tr></table></figure><ul><li>models.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><ul><li>app.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">db.init_app(app)</span><br><span class="line">db.create_all(app=app)</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="mysql-中的默认时间值"><a href="#mysql-中的默认时间值" class="headerlink" title="mysql 中的默认时间值"></a>mysql 中的默认时间值</h3><p>mysql 中 timestamp 类型可设置两种默认值</p><p><code>CURRENT_TIMESTAMP</code> ：当我更新这条记录的时候，这条记录的这个字段不会改变</p><p><code>CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</code> ：当我更新这条记录的时候，这条记录的这个字段将会改变</p><p>所以可对以下字段设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datet</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    createdDate = db.Column(db.DateTime, nullable=<span class="literal">False</span>, server_default=db.text(<span class="string">&#x27;CURRENT_TIMESTAMP&#x27;</span>))</span><br><span class="line">    updatedDate = db.Column(db.DateTime, nullable=<span class="literal">False</span>, server_default=db.text(<span class="string">&#x27;CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP&#x27;</span>))</span><br></pre></td></tr></table></figure><p>在 <a href="https://docs.sqlalchemy.org/en/14/core/defaults.html#sqlalchemy.schema.ColumnDefault">sqlalchemy</a> 上看到使用 <code>onupdate</code> 设置更新时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">t = Table(<span class="string">&quot;mytable&quot;</span>, metadata_obj,</span><br><span class="line">    Column(<span class="string">&#x27;id&#x27;</span>, Integer, primary_key=<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># define &#x27;last_updated&#x27; to be populated with datetime.now()</span></span><br><span class="line">    Column(<span class="string">&#x27;last_updated&#x27;</span>, DateTime, onupdate=datetime.datetime.now),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="default-amp-server-default"><a href="#default-amp-server-default" class="headerlink" title="default &amp; server_default"></a>default &amp; server_default</h3><p>未使用 <code>server_default</code> 的表结构</p><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>NO</td><td>PRI</td><td>NULL</td><td>auto_increment</td></tr><tr><td>username</td><td>varchar(30)</td><td>NO</td><td></td><td>NULL</td><td></td></tr><tr><td>email</td><td>varchar(30)</td><td>NO</td><td>UNI</td><td>NULL</td><td></td></tr><tr><td>password</td><td>varchar(30)</td><td>NO</td><td></td><td>NULL</td><td></td></tr><tr><td>role</td><td>int</td><td>NO</td><td></td><td>NULL</td><td></td></tr><tr><td>createdDate</td><td>datetime</td><td>NO</td><td></td><td>NULL</td><td></td></tr></tbody></table><p>使用 <code>server_default</code> 的表结构</p><table><thead><tr><th>Field</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>NO</td><td>PRI</td><td>NULL</td><td>auto_increment</td></tr><tr><td>username</td><td>varchar(30)</td><td>NO</td><td></td><td>NULL</td><td></td></tr><tr><td>email</td><td>varchar(30)</td><td>NO</td><td>UNI</td><td>NULL</td><td></td></tr><tr><td>password</td><td>varchar(30)</td><td>NO</td><td></td><td>NULL</td><td></td></tr><tr><td>role</td><td>int</td><td>NO</td><td></td><td>1</td><td></td></tr><tr><td>createdDate</td><td>datetime</td><td>NO</td><td></td><td>CURRENT_TIMESTAMP</td><td>DEFAULT_GENERATED</td></tr></tbody></table><p>这篇文章给我提供了很大的帮助 <a href="https://www.cnblogs.com/caicaizi/p/14278604.html">sqlalchemy中Column的默认值属性</a>，非常感谢作者</p><h3 id="model-amp-json-dict"><a href="#model-amp-json-dict" class="headerlink" title="model &amp; json(dict)"></a>model &amp; json(dict)</h3><blockquote><p>JavaScript 中的 JSON（对象），Python 中叫做 dict（字典） {key: value}</p><p>JavaScript 中的 Array（数组），Python 中叫做 list（列表） []</p></blockquote><p><code>flask-sqlalchemy</code> 查询返回的数据类型为 class，在 flask 中无法直接 return，无法直接使用 session 保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">article = Article.query.first()</span><br><span class="line"><span class="built_in">print</span>(article) <span class="comment"># &lt;Article 1&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(article)) <span class="comment"># &lt;class &#x27;app.Article&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义函数 to_dict 进行处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_dict</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(data).__name__ == <span class="string">&#x27;list&#x27;</span>:</span><br><span class="line">        new_list = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            new_dict = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> item.__dict__.items():</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;_sa_instance_state&#x27;</span>):</span><br><span class="line">                    new_dict[k] = v</span><br><span class="line">            new_list.append(new_dict)</span><br><span class="line">        <span class="keyword">return</span> new_list</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> data.__dict__.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;_sa_instance_state&#x27;</span>):</span><br><span class="line">                new_dict[k] = v</span><br><span class="line">        <span class="keyword">return</span> new_dict</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(article) <span class="comment"># &#123;&#x27;content&#x27;: &#x27;content1&#x27;, &#x27;title&#x27;: &#x27;title1&#x27;, &#x27;aid&#x27;: 1, &#x27;cid&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><p>如果想要返回 JSON 数据格式需要用 <code>jsonify</code> 处理，否则会报错。<code>jsonify</code> 会将字典或者列表转为 JSON，并且将响应的 <code>Content-Type</code> 设置为 <code>application/json</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> jsonify(to_dict(articles))</span><br></pre></td></tr></table></figure><ul><li>给 model 增加方法</li></ul><p><a href="https://stackoverflow.com/questions/5022066/how-to-serialize-sqlalchemy-result-to-json">https://stackoverflow.com/questions/5022066/how-to-serialize-sqlalchemy-result-to-json</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">as_dict</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> &#123;c.name: <span class="built_in">str</span>(<span class="built_in">getattr</span>(self, c.name)) <span class="keyword">for</span> c <span class="keyword">in</span> self.__table__.columns&#125;</span><br><span class="line">    </span><br><span class="line">article = Article.query.first()</span><br><span class="line">article = article.to_dict()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask的基本使用</title>
      <link href="/posts/5ae07efc/"/>
      <url>/posts/5ae07efc/</url>
      
        <content type="html"><![CDATA[<p>最近在做毕设，基于 OpenCV 的智能监控系统，使用 C/S 架构，最后技术选型用了 Flask 框架</p><p>用了差不多半天时间学了下 Flask，不得不说，开发起来是真的舒服。之前用 node + art-template 开发的一个博客系统，且不说配置麻烦，开发起来也比较繁琐，使用起来两者的语法很多都很相似，上手很快</p><p>Flask 自带基于 <a href="https://jinja.palletsprojects.com/templates/">Jinja</a> 的模板引擎，session，蓝图（相当于 express、koa 中的 router），并且衍生除了很多插件</p><p>等忙完这段时间准备用 Python 重构下之前写的项目</p><h2 id="最基本的-Flask-应用"><a href="#最基本的-Flask-应用" class="headerlink" title="最基本的 Flask 应用"></a>最基本的 Flask 应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"><span class="comment"># url_for 的值为要跳转路由的函数名，如果使用了蓝图，值为 蓝图名.函数名</span></span><br></pre></td></tr></table></figure><h2 id="模板引擎传值"><a href="#模板引擎传值" class="headerlink" title="模板引擎传值"></a>模板引擎传值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#x27;index.html&#x27;，msg=&#x27;messgae&#x27;)</span><br></pre></td></tr></table></figure><p>html 文件中使用 <code>&#123;&#123; msg &#125;&#125;</code> 接收值</p><h2 id="动态路由-amp-路由传值"><a href="#动态路由-amp-路由传值" class="headerlink" title="动态路由 &amp; 路由传值"></a>动态路由 &amp; 路由传值</h2><p>动态路由格式：<code>&lt;converter:variable_name&gt;</code>，converter 可不传默认为类型为 string</p><table><thead><tr><th align="center"><code>converter</code></th><th align="center">variable_name</th></tr></thead><tbody><tr><td align="center"><code>string</code></td><td align="center">（缺省值） 接受任何不包含斜杠的文本</td></tr><tr><td align="center"><code>int</code></td><td align="center">接受正整数</td></tr><tr><td align="center"><code>float</code></td><td align="center">接受正浮点数</td></tr><tr><td align="center"><code>path</code></td><td align="center">类似 <code>string</code> ，但可以包含斜杠</td></tr><tr><td align="center"><code>uuid</code></td><td align="center">接受 UUID 字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;error&#x27;</span>, msg=<span class="string">&#x27;throw an error&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.router(<span class="params"><span class="string">&#x27;/error/&lt;msg&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(msg) <span class="comment"># throw an error</span></span><br><span class="line">    <span class="keyword">return</span> msg</span><br></pre></td></tr></table></figure><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>静态文件夹 <code>/static</code>，通过 <code>ip:port/static/xxx</code> 访问</p><h2 id="路由结尾加不加斜杠？"><a href="#路由结尾加不加斜杠？" class="headerlink" title="路由结尾加不加斜杠？"></a>路由结尾加不加斜杠？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/projects/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projects</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The project page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/about&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;The about page&#x27;</span></span><br></pre></td></tr></table></figure><p>这两种路由的区别是，如果访问 /projects 的 URL，Flask 会自动重定向到 /projects/</p><p>而 /about 只能使用 /about 来访问，使用 /about/ 访问会 404 错误</p><h2 id="http-方法"><a href="#http-方法" class="headerlink" title="http 方法"></a>http 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@user.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;home/login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(request.method == <span class="string">&#x27;POST&#x27;</span>) <span class="comment"># true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this is a post request&#x27;</span></span><br></pre></td></tr></table></figure><p>可以根据请求类型处理表单请求</p><h2 id="请求对象-request"><a href="#请求对象-request" class="headerlink" title="请求对象 request"></a>请求对象 request</h2><p>request 获取数据的两种格式，一种是 request.xxx.get(‘xxx’)，一种是 request.xxx[‘xxx’]</p><p>最基本的 request.method 获取请求类型， request.path 获取请求路径</p><p>更多查看 <a href="https://dormousehole.readthedocs.io/en/latest/api.html#flask.Request">https://dormousehole.readthedocs.io/en/latest/api.html#flask.Request</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(request.args.get(<span class="string">&#x27;name&#x27;</span>)) <span class="comment"># 访问 /user?name=zs 输出 zs</span></span><br><span class="line">    <span class="built_in">print</span>(request.json.get(<span class="string">&#x27;xxx&#x27;</span>)) <span class="comment"># 当请求头 Content-Type: application/json 时获取发送 json 内容</span></span><br><span class="line">    <span class="built_in">print</span>(request.form.get(<span class="string">&#x27;xxx&#x27;</span>)) <span class="comment"># 获取 form 表单提交内容</span></span><br></pre></td></tr></table></figure><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>使用 session 前需配置 SECRET_KEY，<code>app.config[&#39;SECRET_KEY&#39;] = xxx</code>，也可以使用配置文件配置</p><p><a href="https://dormousehole.readthedocs.io/en/latest/config.html#id5">https://dormousehole.readthedocs.io/en/latest/config.html#id5</a></p><p>Flask 中 通过 <code>session[&#39;xxx&#39;] = xxx</code> 设置 session</p><p><code>session[&#39;xxx&#39;]</code>（不存在抛出异常） 或者 <code>session.get(&#39;xxx&#39;)</code>（不存在返回 None） 来获取 session</p><p><code>session.pop(&#39;xxx&#39;)</code> 移除一个 session</p><p><code>session.clear()</code> 清除所有 session</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署前端项目</title>
      <link href="/posts/c25d3ac/"/>
      <url>/posts/c25d3ac/</url>
      
        <content type="html"><![CDATA[<h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><p>安装 express</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><blockquote><p>如果 vue-router 路由模式为 <code>history</code>，需额外安装 <code>connect-history-api-fallback</code> 中间件</p></blockquote><p>新建文件 <code>serve/main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">+ <span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">&#x27;connect-history-api-fallback&#x27;</span>)</span><br><span class="line"></span><br><span class="line">+ app.use(history())</span><br><span class="line">app.use(express.static(path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">5678</span>)</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prod&quot;</span>: <span class="string">&quot;pm2 serve/main.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>确保已经安装 <code>docker</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br><span class="line">Docker version 20.10.12, build e91ed57</span><br></pre></td></tr></table></figure><h3 id="拉取-nginx-镜像"><a href="#拉取-nginx-镜像" class="headerlink" title="拉取 nginx 镜像"></a>拉取 <code>nginx</code> 镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>vue-router + nginx，使用 history 模式刷新会报404错误，需更改 nginx 配置文件<br><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#nginx">https://router.vuejs.org/zh/guide/essentials/history-mode.html#nginx</a></p></blockquote><h4 id="拉取默认配置文件"><a href="#拉取默认配置文件" class="headerlink" title="拉取默认配置文件"></a>拉取默认配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8888:80 --name nginx nginx</span><br></pre></td></tr></table></figure><p>新建文件夹 <code>serve/conf</code>、<code>serve/logs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 nginx 默认配置文件拷贝到本机</span></span><br><span class="line">docker cp nginx:/etc/nginx/nginx.conf $PWD/serve/conf</span><br><span class="line">docker cp nginx:/etc/nginx/conf.d/default.conf $PWD/serve/conf</span><br></pre></td></tr></table></figure><p>修改 <code>default.conf</code> 文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">+   <span class="attribute">try_files</span> $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署容器"><a href="#部署容器" class="headerlink" title="部署容器"></a>部署容器</h3><p>将配置文件挂载到项目容器内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8848:80 \</span><br><span class="line">  --name vue-music \</span><br><span class="line">  -v $PWD/dist:/usr/share/nginx/html \</span><br><span class="line">  -v $PWD/serve/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  -v $PWD/serve/conf/default.conf:/etc/nginx/conf.d/default.conf \</span><br><span class="line">  -v $PWD/serve/logs:/var/log/nginx</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝和浅拷贝</title>
      <link href="/posts/d8afa4d2/"/>
      <url>/posts/d8afa4d2/</url>
      
        <content type="html"><![CDATA[<p>主要区别：浅拷贝只是引用变量的内存地址，深拷贝复制真正的值</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p><code>Object.assign</code> 、展开运算符（…）</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>使用 <code>JSON.parse(JSON.stringify(object))</code></p><p>局限性</p><ul><li>会忽略 <code>undefined</code></li><li>会忽略 <code>symbol</code></li><li>不能序列化函数</li><li>不能解决循环引用的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newObj</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">        newObj = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newObj = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                newObj[key] = deepClone(obj[key])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newObj[key] = obj[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建前端脚手架工具</title>
      <link href="/posts/35d97e22/"/>
      <url>/posts/35d97e22/</url>
      
        <content type="html"><![CDATA[<p>搭建了一个前端脚手架工具，模板集成了 vite、vue3、vue-router、vuex、axios</p><p><img src="https://oyal.oss-cn-beijing.aliyuncs.com/img/202202061544410.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> &#123; program &#125; = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> memFs = <span class="built_in">require</span>(<span class="string">&#x27;mem-fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> editor = <span class="built_in">require</span>(<span class="string">&#x27;mem-fs-editor&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> store = memFs.create();</span><br><span class="line"><span class="keyword">const</span> memFsEditor = editor.create(store)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> CWD = process.cwd()</span><br><span class="line"><span class="keyword">let</span> ROOT_PATH</span><br><span class="line"></span><br><span class="line">program.version(<span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>).version)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">&#x27;create &lt;name&gt;&#x27;</span>)</span><br><span class="line">  .alias(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">  .description(<span class="string">&#x27;init a vue project&#x27;</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> files = fs.readdirSync(CWD)</span><br><span class="line">    <span class="keyword">if</span> (files.length !== <span class="number">0</span>) &#123; <span class="comment">// 当前文件夹不为空</span></span><br><span class="line">      inquirer.prompt([</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;confirm&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;isNotEmpty&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">`destination is not empty, create a folder &#x27;<span class="subst">$&#123;name&#125;</span>&#x27;?`</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]).then(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.isNotEmpty === <span class="literal">true</span>) &#123;</span><br><span class="line">          ROOT_PATH = path.resolve(CWD, name)</span><br><span class="line">          <span class="keyword">if</span> (fs.existsSync(ROOT_PATH)) &#123; <span class="comment">// 存在同名文件夹</span></span><br><span class="line">            <span class="built_in">console</span>.log(chalk.red(<span class="string">`folder &#x27;<span class="subst">$&#123;ROOT_PATH&#125;</span>&#x27; already exists`</span>))</span><br><span class="line">            fileTree(ROOT_PATH)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fs.mkdirSync(ROOT_PATH)</span><br><span class="line">            memFsEditor.copyTpl(path.resolve(__dirname, <span class="string">&#x27;../templates&#x27;</span>), ROOT_PATH, &#123; name &#125;)</span><br><span class="line">            memFsEditor.commit(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              printLog(name)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ROOT_PATH = CWD</span><br><span class="line">      memFsEditor.copyTpl(path.resolve(__dirname, <span class="string">&#x27;../templates&#x27;</span>), ROOT_PATH, &#123; name &#125;)</span><br><span class="line">      memFsEditor.commit(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        printLog()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileTree</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> files = fs.readdirSync(filePath)</span><br><span class="line">  files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fileDir = path.resolve(filePath, file)</span><br><span class="line">    <span class="keyword">const</span> stats = fs.statSync(fileDir)</span><br><span class="line">    <span class="keyword">let</span> isFile = stats.isFile()</span><br><span class="line">    <span class="keyword">let</span> isDir = stats.isDirectory()</span><br><span class="line">    <span class="keyword">if</span> (isFile) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;   &#x27;</span> + chalk.greenBright(<span class="string">&#x27;create :&#x27;</span>), path.relative(ROOT_PATH, fileDir))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isDir) &#123;</span><br><span class="line">      fileTree(fileDir)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  fileTree(ROOT_PATH)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`</span></span><br><span class="line"><span class="string">      install dependencies:</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;chalk.green(<span class="string">`&gt; cd <span class="subst">$&#123;name ? <span class="string">&#x27;./&#x27;</span> + name : <span class="string">&#x27;.&#x27;</span>&#125;</span> &amp;&amp; npm install`</span>)&#125;</span></span></span><br><span class="line"><span class="string">      run the app:</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;chalk.green(<span class="string">&#x27;&gt; npm run dev&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">      `</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">program.parse()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PS F:\cli-demo&gt; oyal-cli create cli-demo</span><br><span class="line">   create : index.html</span><br><span class="line">   create : package-lock.json</span><br><span class="line">   create : package.json</span><br><span class="line">   create : public\favicon.ico</span><br><span class="line">   create : README.md</span><br><span class="line">   create : src\api\index.js</span><br><span class="line">   create : src\App.vue</span><br><span class="line">   create : src\assets\logo.png</span><br><span class="line">   create : src\config\index.js</span><br><span class="line">   create : src\main.js</span><br><span class="line">   create : src\permission.js</span><br><span class="line">   create : src\router\index.js</span><br><span class="line">   create : src\store\actions.js</span><br><span class="line">   create : src\store\getters.js</span><br><span class="line">   create : src\store\index.js</span><br><span class="line">   create : src\store\mutations.js</span><br><span class="line">   create : src\utils\request.js</span><br><span class="line">   create : src\views\About.vue</span><br><span class="line">   create : src\views\Home.vue</span><br><span class="line">   create : vite.config.js</span><br><span class="line">   create : webstorm.config.js</span><br><span class="line"></span><br><span class="line">      install dependencies:</span><br><span class="line">          &gt; cd . &amp;&amp; npm install</span><br><span class="line">      run the app:</span><br><span class="line">          &gt; npm run dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 前端工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js常用小技巧</title>
      <link href="/posts/a128b83/"/>
      <url>/posts/a128b83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>持续更新中……</p></blockquote><h2 id="判断对象是否为空"><a href="#判断对象是否为空" class="headerlink" title="判断对象是否为空"></a>判断对象是否为空</h2><p><code>Obeject.keys(obj)</code> 返回不包括原型上的可枚举属性，即自身的可枚举属性</p><p><code>JSON.stringify(obj)</code> 也是只能读取对象本身的可枚举属性</p><p><code>Object.getOwnPropertyNames(obj)</code> symbol 作为 key 无法检测</p><p><code>for...in</code> 会返回继承的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span> &amp;&amp; <span class="built_in">Object</span>.getOwnPropertySymbols(obj).length === <span class="number">0</span></span><br></pre></td></tr></table></figure><p>一般来说 Object.keys(obj).length === 0 就够了</p><h2 id="格式化JSON字符串"><a href="#格式化JSON字符串" class="headerlink" title="格式化JSON字符串"></a>格式化JSON字符串</h2><p>node写文件时如果直接把JSON数据转为字符串，数据会全在一行比较丑，不方便阅读</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;code&quot;</span>:<span class="number">200</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;success&quot;</span>,<span class="attr">&quot;pagination&quot;</span>:&#123;<span class="attr">&quot;currentPage&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;pageSize&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;total&quot;</span>:<span class="number">26</span>&#125;,<span class="attr">&quot;sentences&quot;</span>:[&#123;<span class="attr">&quot;copyright&quot;</span>:<span class="string">&quot;Flipped@flipped.ml&quot;</span>,<span class="attr">&quot;createdDate&quot;</span>:<span class="string">&quot;2021-07-27T06:00:46.123Z&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;610119e3a85b362b16bacffa&quot;</span>,<span class="attr">&quot;sentence&quot;</span>:<span class="string">&quot;“你觉得爱情是什么？” “舒适且不尴尬的沉默”&quot;</span>,<span class="attr">&quot;__v&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="attr">&quot;copyright&quot;</span>:<span class="string">&quot;Flipped@flipped.ml&quot;</span>,<span class="attr">&quot;createdDate&quot;</span>:<span class="string">&quot;2021-07-27T06:00:46.123Z&quot;</span>,<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;60ffa341a85b362b16bacff0&quot;</span>,<span class="attr">&quot;sentence&quot;</span>:<span class="string">&quot;音乐老师说：“我不喜欢小苹果那类歌曲，但我不会去诋毁他，因为音乐没有好不好，只有合不合适。”音乐的低俗高雅之别，只不过是人们觉得自己高雅，应该享用特别一点的东西，对于不适合自己，自己不喜欢的东西，便嗤之以鼻，以显示自己的与众不同&quot;</span>,<span class="attr">&quot;__v&quot;</span>:<span class="number">0</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>使用<code>JSON.stringify(data, null, &#39;\t&#39;)</code>将数据格式化</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line"><span class="attr">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line"><span class="attr">&quot;pagination&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;currentPage&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">&quot;pageSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">&quot;total&quot;</span>: <span class="number">26</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;sentences&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;copyright&quot;</span>: <span class="string">&quot;Flipped@flipped.ml&quot;</span>,</span><br><span class="line"><span class="attr">&quot;createdDate&quot;</span>: <span class="string">&quot;2021-07-27T06:00:46.123Z&quot;</span>,</span><br><span class="line"><span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;610119e3a85b362b16bacffa&quot;</span>,</span><br><span class="line"><span class="attr">&quot;sentence&quot;</span>: <span class="string">&quot;“你觉得爱情是什么？” “舒适且不尴尬的沉默”&quot;</span>,</span><br><span class="line"><span class="attr">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;copyright&quot;</span>: <span class="string">&quot;Flipped@flipped.ml&quot;</span>,</span><br><span class="line"><span class="attr">&quot;createdDate&quot;</span>: <span class="string">&quot;2021-07-27T06:00:46.123Z&quot;</span>,</span><br><span class="line"><span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;60ffa341a85b362b16bacff0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;sentence&quot;</span>: <span class="string">&quot;音乐老师说：“我不喜欢小苹果那类歌曲，但我不会去诋毁他，因为音乐没有好不好，只有合不合适。”音乐的低俗高雅之别，只不过是人们觉得自己高雅，应该享用特别一点的东西，对于不适合自己，自己不喜欢的东西，便嗤之以鼻，以显示自己的与众不同&quot;</span>,</span><br><span class="line"><span class="attr">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取文件扩展名"><a href="#获取文件扩展名" class="headerlink" title="获取文件扩展名"></a>获取文件扩展名</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filename = <span class="string">&#x27;see you again.mp3&#x27;</span></span><br><span class="line"><span class="keyword">const</span> suffix = filename.split(<span class="string">&#x27;.&#x27;</span>).pop()</span><br><span class="line"><span class="built_in">console</span>.log(suffix) <span class="comment">// mp3</span></span><br></pre></td></tr></table></figure><h2 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h2><p>补全时间前面的0</p><p>方法1：使用<code>padStart</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> year = date.getFullYear()</span><br><span class="line"><span class="keyword">const</span> month = (date.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> day = date.getDay().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> hour = date.getHours().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> minute = date.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> second = date.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>方法2，使用<code>substr</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> day = <span class="string">&#x27;6&#x27;</span></span><br><span class="line">(<span class="string">&#x27;00&#x27;</span> + day).substr(day.length) <span class="comment">// 06</span></span><br></pre></td></tr></table></figure><p>借此封装一个简易的格式化日期函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formatDate = <span class="function">(<span class="params">date, fmt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="string">&quot;M+&quot;</span>: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;D+&quot;</span>: date.getDate(),</span><br><span class="line">    <span class="string">&quot;h+&quot;</span>: date.getHours(),</span><br><span class="line">    <span class="string">&quot;m+&quot;</span>: date.getMinutes(),</span><br><span class="line">    <span class="string">&quot;s+&quot;</span>: date.getSeconds()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(Y+)/</span>.test(fmt)) &#123;</span><br><span class="line">    fmt = fmt.replace(<span class="built_in">RegExp</span>.$1, date.getFullYear() + <span class="string">&#x27;&#x27;</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$1.length)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(&quot;</span> + k + <span class="string">&quot;)&quot;</span>).test(fmt)) &#123;</span><br><span class="line">      fmt = fmt.replace(<span class="built_in">RegExp</span>.$1, <span class="built_in">RegExp</span>.$1.length === <span class="number">1</span> ? o[k] : o[k].toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">      <span class="comment">// fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : (&#x27;00&#x27; + o[k]).substr((o[k] + &#x27;&#x27;).length))</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fmt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span>)) <span class="comment">// 2022-01-23 20:01:41</span></span><br></pre></td></tr></table></figure><h2 id="获取数组最后一个元素"><a href="#获取数组最后一个元素" class="headerlink" title="获取数组最后一个元素"></a>获取数组最后一个元素</h2><ol><li>根据索引</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr[arr.length - <span class="number">1</span>]) <span class="comment">// &#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>pop() 方法</li></ol><p>pop() 方法用于删除并返回数组的最后一个元素，会改变原数组长度，可以配合 slice() 方法获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()) <span class="comment">// &#x27;vue&#x27;   arr = [&#x27;html&#x27;, &#x27;css&#x27;, &#x27;js&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice().pop()) <span class="comment">// &#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>splice() 方法</li></ol><p>同样会改变原数组，并且返回的格式是 array ，可以用 splice(-1)[0] 获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(-<span class="number">1</span>)) <span class="comment">// [&#x27;vue&#x27;]   arr = [&#x27;html&#x27;, &#x27;css&#x27;, &#x27;js&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice().splice(-<span class="number">1</span>)[<span class="number">0</span>]) <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="统计字符串中每个字符出现的次数"><a href="#统计字符串中每个字符出现的次数" class="headerlink" title="统计字符串中每个字符出现的次数"></a>统计字符串中每个字符出现的次数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countNumber = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">    map.set(i, (map.get(i) || <span class="number">0</span>) + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countNumber(<span class="string">&#x27;aabcddeff&#x27;</span>))  <span class="comment">// Map(6) &#123; &#x27;a&#x27; =&gt; 2, &#x27;b&#x27; =&gt; 1, &#x27;c&#x27; =&gt; 1, &#x27;d&#x27; =&gt; 2, &#x27;e&#x27; =&gt; 1, &#x27;f&#x27; =&gt; 2 &#125;</span></span><br></pre></td></tr></table></figure><p>类比：统计出现次数做多的字符以及次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;aabbbccd&#x27;</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> str) &#123;</span><br><span class="line">  map.set(i, (map.get(i) | <span class="number">0</span>) + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">map = <span class="keyword">new</span> <span class="built_in">Map</span>([...map].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b[<span class="number">1</span>] - a[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(map.keys())[<span class="number">0</span>]) <span class="comment">// b</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(map.values())[<span class="number">0</span>]) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="数字排序-amp-字符串排序"><a href="#数字排序-amp-字符串排序" class="headerlink" title="数字排序 &amp; 字符串排序"></a>数字排序 &amp; 字符串排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numSort = <span class="function">(<span class="params">numArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> numArr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(numSort([<span class="number">4</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>])) <span class="comment">// [ 3, 4, 4, 8, 99 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strSort = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span>  [...s].sort().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(strSort(<span class="string">&#x27;bgdhaavtz&#x27;</span>)) <span class="comment">// aabdghtvz</span></span><br></pre></td></tr></table></figure><h2 id="字符串转数组"><a href="#字符串转数组" class="headerlink" title="字符串转数组"></a>字符串转数组</h2><ol><li>split() 方法</li><li>es6 中的扩展运算符 … </li><li>es6 中的 Array.from 方法</li><li>for…of 遍历字符串然后 push 进空数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;ILoveYou&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">&#x27;&#x27;</span>)) <span class="comment">// 不建议</span></span><br><span class="line"><span class="comment">// https://stackoverflow.com/questions/4547609/how-to-get-character-array-from-a-string</span></span><br><span class="line"><span class="built_in">console</span>.log([...str])</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(str))</span><br></pre></td></tr></table></figure><h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值 = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * 可能值的总数 + 第一个可能的值)</span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr)))</span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(arr)])</span><br></pre></td></tr></table></figure><h2 id="判断数组对象"><a href="#判断数组对象" class="headerlink" title="判断数组对象"></a>判断数组对象</h2><ol><li><code>Object.prototype.toString.call()</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> arr = []</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> obj = &#123;&#125;</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Object.prototype.toString.call(arr)</span></span><br><span class="line">&#x27;[object Array]&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Object.prototype.toString.call(obj)</span></span><br><span class="line">&#x27;[object Object]&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>constructor</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> arr.constructor()</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> obj.constructor()</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温webpack</title>
      <link href="/posts/d68e7b9e/"/>
      <url>/posts/d68e7b9e/</url>
      
        <content type="html"><![CDATA[<h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>安装webpack、webpack-cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>新建<code>src/index.js</code>文件，根目录新建<code>webpack.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;build.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loader的使用"><a href="#loader的使用" class="headerlink" title="loader的使用"></a>loader的使用</h2><h3 id="css处理"><a href="#css处理" class="headerlink" title="css处理"></a>css处理</h3><p>postcss-loader，一般配合 <a href="http://autoprefixer.github.io/">Autoprefixer</a> 使用，自动获取浏览器的流行度和能够支持的属性，并根据这些数据帮你自动为 CSS 规则添加前缀</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i style-loader css-loader postcss-loader -D</span><br><span class="line">npm i autoprefixer -D</span><br></pre></td></tr></table></figure><p>新建 postcss.config.js 配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.config.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包less/sass、scss文件类似，只需安装 less-loader/sass-loader 即可。less-loader/sass-loader 放在 postcss-loader 之后</p><blockquote><p><code>sass-loader</code> requires you to install either <a href="https://github.com/sass/dart-sass">Dart Sass</a> or <a href="https://github.com/sass/node-sass">Node Sass</a> on your own (more documentation can be found below).</p></blockquote><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><p>图片</p><p>背景图片使用 type 设置打包类型；src 使用 <code>require(&#39;./assets/img.png&#39;).default</code>，webpack 默认使用 esModule 引用图片对象而不是图片路径</p><p>type 设置 <code>asset/resource</code> 会生成图片原文件，<code>asset/inline</code> 会打包成 base64 格式，通过 parser/dataUrlCondition/maxSize 判断是否转为 base64 格式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/</span>, type: <span class="string">&#x27;asset/resource&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>webpack5.x 已弃用 url-loader、file-loader，踩半天坑才查到。<a href="https://webpack.docschina.org/guides/asset-modules/">https://webpack.docschina.org/guides/asset-modules/</a></p></blockquote><p><del>可通过 file-loader 的 options 来设置打包图片的路径和名称</del></p><p><del>url-loader 会将图片打包为 base64 的格式，可减少请求次数，如果图片过大会影响打包体积，通过设置 limit 根据文件大小来判断是否转为 base64格式</del></p><p>5.x版本通过设置 generator 自定义文件输出名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/</span>, </span><br><span class="line">                type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">                <span class="attr">generator</span>: &#123;</span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;img/[hash][ext][query]&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">parser</span>: &#123;</span><br><span class="line">                    <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                        <span class="attr">maxSize</span>: <span class="number">24</span> * <span class="number">1024</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图标字体类似</p><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure><p>规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            use: [<span class="string">&#x27;babel-loader&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建 <code>babel.config.json</code> 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载-vue-文件"><a href="#加载-vue-文件" class="headerlink" title="加载 vue 文件"></a>加载 vue 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D vue vue-loader vue-template-compiler</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2 class=&quot;title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;title&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.title &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时打包会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">File was processed with these loaders:</span><br><span class="line"> * ./node_modules/vue-loader/lib/index.js</span><br><span class="line">You may need an additional loader to handle the result of these loaders.</span><br><span class="line">|</span><br><span class="line">&gt; &lt;div&gt;</span><br><span class="line">|   &lt;h2 class=&quot;title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</span><br><span class="line">| &lt;/div&gt;</span><br><span class="line"> @ ./src/App.vue 1:0-94 11:2-8 12:2-17</span><br><span class="line"> @ ./src/index.js 2:0-28 5:13-16</span><br><span class="line"></span><br><span class="line">ERROR in ./src/App.vue</span><br><span class="line">Module Error (from ./node_modules/vue-loader/lib/index.js):</span><br><span class="line">vue-loader was used without the corresponding plugin. Make sure to include VueLoaderPlugin in your webpack config.</span><br><span class="line"> @ ./src/index.js 2:0-28 5:13-16</span><br><span class="line"></span><br><span class="line">1 error has detailed information that is not shown.</span><br><span class="line">Use &#x27;stats.errorDetails: true&#x27; resp. &#x27;--stats-error-details&#x27; to show it.</span><br></pre></td></tr></table></figure><p>需要配合 VueLoaderPlugin 使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin-webpack5.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> VueLoaderPlugin()</span><br></pre></td></tr></table></figure><p>如需使用 css 预编译器编写 vue 代码，需要安装相应的 loader</p><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><p><a href="https://webpack.docschina.org/plugins/">https://webpack.docschina.org/plugins/</a></p><p>html-webpack-plugin</p><p>清空 dist 文件目录</p><p>clean-webpack-plugin</p><p>自定义打包 html 模板</p><p>DefinePlugin</p><p>定义全局变量，import { DefinePlugin } from ‘webpack’</p><p>copy-webpack-plugin</p><p>拷贝文件或者是整个目录到输出文件夹，<a href="https://webpack.docschina.org/plugins/copy-webpack-plugin/">https://webpack.docschina.org/plugins/copy-webpack-plugin/</a></p><p>uglifyjs-webpack-plugin</p><p>压缩 js 代码体积，<a href="https://www.npmjs.com/package/uglifyjs-webpack-plugin">https://www.npmjs.com/package/uglifyjs-webpack-plugin</a></p><h2 id="proxy-代理"><a href="#proxy-代理" class="headerlink" title="proxy 代理"></a>proxy 代理</h2><p>对于跨域的请求可以用 devServer/proxy 来解决</p><p>安装 webpack-dev-server，webpack.config.js 做以下配置，这样就可以友好的请求网址了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://api.github.com&#x27;</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="开发-生产环境配置"><a href="#开发-生产环境配置" class="headerlink" title="开发/生产环境配置"></a>开发/生产环境配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack-merge</span><br></pre></td></tr></table></figure><p>新建 webpack.common.js、webpack.dev.js、webpack.prod.js 文件</p><p>webpack.common.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;js/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: path.join(__dirname, <span class="string">&#x27;public/index.html&#x27;</span>) &#125;),</span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: <span class="string">&#x27;public&#x27;</span>,</span><br><span class="line">          <span class="attr">globOptions</span>: &#123;</span><br><span class="line">            <span class="attr">ignore</span>: [<span class="string">&#x27;**/index.html&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|svg|gif|jpe?g)$/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&#x27;img/[hash][ext][query]&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">24</span> * <span class="number">1024</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;babel-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.dev.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;merge&#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>webpack.prod.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;merge&#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> UglifyjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">performance</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> UglifyjsWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装使用Nginx</title>
      <link href="/posts/89ac143e/"/>
      <url>/posts/89ac143e/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>下载地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.21.2.tar.gz</span><br><span class="line">tar -zxvf https://nginx.org/download/nginx-1.21.2.tar.gz</span><br><span class="line">mv nginx-1.21.2 nginx</span><br><span class="line">cd nginx</span><br><span class="line">./configure --prefix=/opt/nginx # 配置安装路径，默认安装 /usr/local/nginx，可根据自己喜好</span><br><span class="line">make &amp;&amp; make install # 如果系统是最小安装，需要执行 yum install make -y</span><br></pre></td></tr></table></figure><p>开启<code>nginx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/nginx/sbin</span><br><span class="line">./nginx</span><br><span class="line"></span><br><span class="line">[root@instance-1 sbin]# curl 34.125.204.106</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 末尾处加上</span></span><br><span class="line">export PATH=$PATH:/opt/nginx/sbin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看进程ID</span></span><br><span class="line">[root@instance-1 sbin]# cat /opt/nginx/logs/nginx.pid </span><br><span class="line">21013</span><br><span class="line">[root@instance-1 sbin]# ps -ef | grep nginx</span><br><span class="line">root     21013     1  0 09:39 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody   21014 21013  0 09:39 ?        00:00:00 nginx: worker process</span><br><span class="line">root     21297 18222  0 11:15 pts/0    00:00:00 grep --color=auto nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭服务</span></span><br><span class="line">kill $(cat /opt/nginx/logs/nginx.pid)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载服务</span></span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载日志文件</span></span><br><span class="line">nginx -s reopen</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试配置文件是否正确</span></span><br><span class="line">nginx -t -c /opt/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭服务</span></span><br><span class="line">nginx -s stop # 快速停止</span><br><span class="line">nginx -s quit # 有序停止</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务</span></span><br><span class="line">nginx -c /opt/nginx/conf/nginx.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/posts/c067e7e3/"/>
      <url>/posts/c067e7e3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>frp下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>frp官方文档：<a href="https://gofrp.org/docs">https://gofrp.org/docs</a></p></blockquote><h2 id="服务端frps配置"><a href="#服务端frps配置" class="headerlink" title="服务端frps配置"></a>服务端frps配置</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.37.1/frp_0.37.1_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.37.1_linux_amd64.tar.gz</span><br><span class="line">mv frp_0.37.1_linux_amd64 frp</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>阿里云服务器需要配置安全组，开放6000/8000端口</p><p>查看防火墙状态：<code>systemctl status firewalld.service</code>，如果出现绿色字样标注的“active（running）”，说明防火墙是开启状态，执行<code>systemctl stop firewalld.service</code>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd frp</span><br><span class="line">vim frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">token = xxxx</span><br></pre></td></tr></table></figure><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/frps.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=frps service</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">Wants=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/root/frp/frps -c /root/frp/frps.ini</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl start frps</span><br><span class="line">systemctl enable frps</span><br></pre></td></tr></table></figure><h2 id="客户端frpc配置"><a href="#客户端frpc配置" class="headerlink" title="客户端frpc配置"></a>客户端frpc配置</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.37.1/frp_0.37.1_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.37.1_linux_amd64.tar.gz</span><br><span class="line">mv frp_0.37.1_linux_amd64 frp</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd frp</span><br><span class="line">vim frpc.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">server_addr = xxx.xxx.xxx.xxx（服务端公网地址）</span><br><span class="line">server_port = 7000</span><br><span class="line">token = xxx</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure><h3 id="挂载-1"><a href="#挂载-1" class="headerlink" title="挂载"></a>挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/frpc.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=frpc service</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">Wants=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/root/frp/frpc -c /root/frp/frpc.ini</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">systemctl start frpc</span><br><span class="line">systemctl enable frpc</span><br></pre></td></tr></table></figure><blockquote><p>补充</p></blockquote><p>不知为何，家里的ubuntu不能开机自启frpc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@oyal-desktop:~# systemctl status frpc</span><br><span class="line">● frpc.service - frapc service</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/frpc.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: failed (Result: exit-code) since Sat 2021-09-04 12:25:31 CST; 1min 58s ago</span><br><span class="line">    Process: 673 ExecStart=/root/frp/frpc -c /root/frp/frpc.ini (code=exited, status=1/FAILURE)</span><br><span class="line">   Main PID: 673 (code=exited, status=1/FAILURE)</span><br></pre></td></tr></table></figure><p>改用<code>supervisor</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apt install supervisor</span><br><span class="line">vim /etc/supervisor/conf.d/frpc.conf</span><br><span class="line"></span><br><span class="line">[program:frp]</span><br><span class="line">command = /root/frp/frpc -c /root/frp/frpc.ini</span><br><span class="line">autostart = true</span><br><span class="line"></span><br><span class="line">systemctl restart supervisor</span><br><span class="line"></span><br><span class="line">root@oyal-desktop:~# supervisorctl status</span><br><span class="line">frpc                             RUNNING   pid 1438, uptime 0:02:26</span><br></pre></td></tr></table></figure><p>常用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status # 查看进程运行状态</span><br><span class="line">supervisorctl start 进程名 # 启动进程</span><br><span class="line">supervisorctl stop 进程名 # 关闭进程</span><br><span class="line">supervisorctl restart 进程名 # 重启进程</span><br><span class="line">supervisorctl update # 重新载入配置文件</span><br><span class="line">supervisorctl shutdown # 关闭supervisord</span><br><span class="line">supervisorctl clear # 进程名 清空进程日志</span><br><span class="line">supervisorctl # 进入到交互模式下。使用help查看所有命令。</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>可以通过ssh xxx.xxx.xxx.xxx:6000来连接到客户端的22端口</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署NodeJS项目</title>
      <link href="/posts/9a43ecaf/"/>
      <url>/posts/9a43ecaf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考文档：<a href="https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp">https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp</a></p></blockquote><h2 id="安装node镜像"><a href="#安装node镜像" class="headerlink" title="安装node镜像"></a>安装<code>node</code>镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull node # 默认安装 node:latest 最新版</span><br></pre></td></tr></table></figure><p>进入node项目</p><p>新建 <code>Dockerfile</code> 、<code>.dockerignore</code>文件</p><p>Dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package*.json ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;node&quot;</span>, <span class="string">&quot;app.js&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>.dockerignore:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">npm-degub.log</span><br></pre></td></tr></table></figure><p>目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- app.js</span><br><span class="line">|-- Dockerfile</span><br><span class="line">|-- .dockerignore</span><br><span class="line">|-- package.json</span><br><span class="line">`-- package-lock.json</span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build . -t &lt;username&gt;/node-deocker-test</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos node-test]# docker images</span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">oyal/node-test   latest    b74b8c545667   22 minutes ago   911MB</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-9-centos node-test]# docker run -d -p 9000:9000 oyal/node-test</span><br><span class="line"></span><br><span class="line">[root@VM-0-9-centos node-test]# curl 127.0.0.1:9000</span><br><span class="line">nodejs-----deocker</span><br></pre></td></tr></table></figure><p>将主机数据挂载到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -v /root/node-test:/usr/src/app oyal/node-test</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习</title>
      <link href="/posts/6782be63/"/>
      <url>/posts/6782be63/</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS安装docker"><a href="#CentOS安装docker" class="headerlink" title="CentOS安装docker"></a>CentOS安装docker</h2><p>参考文档：</p><ul><li><a href="https://developer.aliyun.com/article/110806">Docker CE 镜像源站-阿里云开发者社区</a></li><li><a href="https://docs.docker.com/engine/install/centos">Install Docker Engine on CentOS</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="将docker加入开机自启"><a href="#将docker加入开机自启" class="headerlink" title="将docker加入开机自启"></a>将docker加入开机自启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h3 id="配置阿里云镜像加速器"><a href="#配置阿里云镜像加速器" class="headerlink" title="配置阿里云镜像加速器"></a>配置阿里云镜像加速器</h3><ol><li>登录阿里云控制台</li><li>点击容器镜像服务</li><li>点击 镜像工具 -&gt; 镜像加速器</li><li>选择适合自己的服务器版本</li></ol><p><img src="https://oyal.oss-cn-beijing.aliyuncs.com/img/202108182105420.png"><br><img src="https://oyal.oss-cn-beijing.aliyuncs.com/img/202108182105568.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxxxxxxx.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-i：容器的标准输入保持打开</span><br><span class="line">-t：让docker分配一个伪终端并绑定到容器的标准输入上</span><br><span class="line">-p : 端口映射 格式为[主机端口：容器端口]</span><br><span class="line">-d : 后台模式运行</span><br><span class="line">-v：挂载主机的目录 格式为[主机路径:容器路径]</span><br><span class="line">--name : 给容器的起一个名字</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="容器-container"><a href="#容器-container" class="headerlink" title="容器 container"></a>容器 container</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询正在启动的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动新容器</span></span><br><span class="line">docker run xxx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止容器</span></span><br><span class="line">docker stop 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">docker rm 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除正在运行的容器</span></span><br><span class="line">docker rm -f 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有容器</span></span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span> 进入容器后开启一个新的终端</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> attach 进入容器正在执行的终端，需要ctrl+p+q退出</span></span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将容器数据拷贝到主机</span></span><br><span class="line">docker cp 容器id:路径 主机路径 # 例如 docker cp ff0:/usr/src/app/. /root/node-test</span><br></pre></td></tr></table></figure><h3 id="镜像-images"><a href="#镜像-images" class="headerlink" title="镜像 images"></a>镜像 images</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装镜像</span></span><br><span class="line">docker pull xxx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除镜像</span></span><br><span class="line">docker rmi xxx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">docker build . -t &lt;username&gt;/docker-name</span><br></pre></td></tr></table></figure><h2 id="docker安装Mysql"><a href="#docker安装Mysql" class="headerlink" title="docker安装Mysql"></a>docker安装Mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql</span><br></pre></td></tr></table></figure><h2 id="docker安装mongoDB"><a href="#docker安装mongoDB" class="headerlink" title="docker安装mongoDB"></a>docker安装mongoDB</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull mongo</span><br><span class="line">docker run -d -p 27017:27017 mongo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 密码启动</span></span><br><span class="line">docker run -d -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=root mongo</span><br></pre></td></tr></table></figure><h2 id="docker安装node"><a href="#docker安装node" class="headerlink" title="docker安装node"></a>docker安装node</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull node</span><br><span class="line">docker run -it node /bin/bash</span><br></pre></td></tr></table></figure><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><h3 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h3><ol><li>注册<code>DockerHub</code>账号：<a href="https://hub.docker.com/">https://hub.docker.com</a></li><li>登录：<code>docker login -u username</code></li><li>推送：<code>docker push username/xxxx:[镜像版本号]</code></li><li>查看: <a href="https://hub.docker.com/repositories">https://hub.docker.com/repositories</a></li></ol><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p>打开阿里云控制台</p><p>点击：容器镜像服务 -&gt; 实例列表</p><ol><li>创建命名空间</li><li>创建镜像仓库（仓库类型可选择私有，代码源选择本地仓库）</li></ol><h4 id="登录阿里云Docker-Registry"><a href="#登录阿里云Docker-Registry" class="headerlink" title="登录阿里云Docker Registry"></a>登录阿里云Docker Registry</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=username registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure><h4 id="从Registry中拉取镜像"><a href="#从Registry中拉取镜像" class="headerlink" title="从Registry中拉取镜像"></a>从Registry中拉取镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/xxx/xxx:[镜像版本号]</span><br></pre></td></tr></table></figure><h4 id="将镜像推送到Registry"><a href="#将镜像推送到Registry" class="headerlink" title="将镜像推送到Registry"></a>将镜像推送到Registry</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=[用户名] registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/xxx/xxx:[镜像版本号]</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/xxx/xxx:[镜像版本号]</span><br></pre></td></tr></table></figure><p>push好慢啊，还得给镜像重命名，算了我还是用<code>DockerHub</code>吧</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
